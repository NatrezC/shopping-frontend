{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension'; //Reducers\n\nimport { cartReducer } from './reducers/cartReducers';\nimport { getProductDetailsReducer, getProductsReducer } from './reducers/productReducers';\nconst reducer = combineReducers({\n  cart: cartReducer,\n  getProducts: getProductsReducer,\n  getProductDetails: getProductDetailsReducer\n});\nconst middleware = [thunk];\nconst cartFromLocalStorage = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : []; //set initial value so when you refresh you still have items in cart\n\nconst INITIAL_STATE = {\n  cart: {\n    cartItems: cartFromLocalStorage\n  }\n};\nconst store = createStore(reducer, INITIAL_STATE, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/home/trez/Desktop/SEIFX818/Unit4/shopping-app/frontend/src/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","cartReducer","getProductDetailsReducer","getProductsReducer","reducer","cart","getProducts","getProductDetails","middleware","cartFromLocalStorage","localStorage","getItem","JSON","parse","INITIAL_STATE","cartItems","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAAQC,wBAAR,EAAkCC,kBAAlC,QAA2D,4BAA3D;AAEA,MAAMC,OAAO,GAAGP,eAAe,CAAC;AAC5BQ,EAAAA,IAAI,EAAEJ,WADsB;AAE5BK,EAAAA,WAAW,EAAEH,kBAFe;AAG5BI,EAAAA,iBAAiB,EAAEL;AAHS,CAAD,CAA/B;AAMA,MAAMM,UAAU,GAAG,CAACT,KAAD,CAAnB;AAEA,MAAMU,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAA/B,GAA0E,EAAvG,C,CAEA;;AACA,MAAMG,aAAa,GAAG;AAClBT,EAAAA,IAAI,EAAE;AACFU,IAAAA,SAAS,EAAEN;AADT;AADY,CAAtB;AAMA,MAAMO,KAAK,GAAGpB,WAAW,CACrBQ,OADqB,EAErBU,aAFqB,EAGrBd,mBAAmB,CAACF,eAAe,CAAC,GAAGU,UAAJ,CAAhB,CAHE,CAAzB;AAMA,eAAeQ,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n//Reducers\nimport { cartReducer } from './reducers/cartReducers';\nimport {getProductDetailsReducer, getProductsReducer} from './reducers/productReducers'\n\nconst reducer = combineReducers({\n    cart: cartReducer,\n    getProducts: getProductsReducer,\n    getProductDetails: getProductDetailsReducer\n});\n\nconst middleware = [thunk];\n\nconst cartFromLocalStorage = localStorage.getItem('cart') ? JSON.parse(localStorage.getItem('cart')) : []\n\n//set initial value so when you refresh you still have items in cart\nconst INITIAL_STATE = {\n    cart: {\n        cartItems: cartFromLocalStorage\n    }\n}\n\nconst store = createStore(\n    reducer, \n    INITIAL_STATE,\n    composeWithDevTools(applyMiddleware(...middleware))\n)\n\nexport default store;"]},"metadata":{},"sourceType":"module"}