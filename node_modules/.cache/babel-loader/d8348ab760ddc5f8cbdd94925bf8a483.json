{"ast":null,"code":"var _jsxFileName = \"/home/trez/Desktop/SEIFX818/Unit4/shopping-app/frontend/src/components/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport './SignUp.css'; //Components\n\nimport FormGroup from './common/FormGroup';\nimport ButtonSpinner from './common/ButtonSpinner'; //Helper\n\nimport { login } from '../services/auth.service';\nimport { resMessage } from '../utilities/functions.utilities'; // Function given to react-validator\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst required = value => {\n  if (!value) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: \"This field is required!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n};\n\nconst Login = props => {\n  _s();\n\n  const form = useRef();\n  const checkBtn = useRef();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\"); // Stores the username in our username state\n\n  const onChangeUsername = e => {\n    const username = e.target.value;\n    setUsername(username);\n  }; // Stores the password in our password state\n\n\n  const onChangePassword = e => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n\n  const handleLogin = e => {\n    e.preventDefault(); //Prevent message clear them out\n\n    setMessage(\"\");\n    setLoading(true); // Validates all the fields\n\n    form.current.validateAll(); // Validator stores errors and we can check if error exist\n\n    console.log(checkBtn.current);\n\n    if (checkBtn.current.context._errors.length === 0) {\n      login(username, password).then(() => {\n        props.history.push(\"/profile\");\n        window.location.reload();\n      }, error => {\n        // Checking all the data recieved from our backend\n        // const resMessage =\n        //     (error.response &&\n        //         error.response.data &&\n        //         error.response.data.message) ||\n        //     error.message ||\n        //     error.toString();\n        // Setting loading to false and return the error\n        setLoading(false); //Checking all the data received from our backend <=== different way\n\n        setMessage(resMessage(error));\n      });\n    } else {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-md-12\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"//ssl.gstatic.com/accounts/ui/avatar_2x.png\",\n        alt: \"profile-img\",\n        className: \"profile-img-card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleLogin,\n        ref: form,\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          text: \"username\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            className: \"form-control\",\n            name: \"username\",\n            value: username,\n            onChange: onChangeUsername,\n            validations: [required]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          text: \"password\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"password\",\n            className: \"form-control\",\n            name: \"password\",\n            value: password,\n            onChange: onChangePassword,\n            validations: [required]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ButtonSpinner, {\n          text: \"login\",\n          loading: loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-danger\",\n            role: \"alert\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CheckButton, {\n          style: {\n            display: \"none\"\n          },\n          ref: checkBtn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"hUho6peEgLW2/xnXxRqV2aabDB0=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/trez/Desktop/SEIFX818/Unit4/shopping-app/frontend/src/components/Login.js"],"names":["React","useState","useRef","Form","Input","CheckButton","FormGroup","ButtonSpinner","login","resMessage","required","value","Login","props","form","checkBtn","username","setUsername","password","setPassword","loading","setLoading","message","setMessage","onChangeUsername","e","target","onChangePassword","handleLogin","preventDefault","current","validateAll","console","log","context","_errors","length","then","history","push","window","location","reload","error","display"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport './SignUp.css'\n\n//Components\nimport FormGroup from './common/FormGroup'\nimport ButtonSpinner from './common/ButtonSpinner'\n\n//Helper\nimport { login } from '../services/auth.service'\nimport { resMessage } from '../utilities/functions.utilities'\n\n// Function given to react-validator\nconst required = (value) => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n\nconst Login = (props) => {\n    const form = useRef();\n    const checkBtn = useRef();\n\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [message, setMessage] = useState(\"\");\n\n    // Stores the username in our username state\n    const onChangeUsername = (e) => {\n        const username = e.target.value;\n        setUsername(username);\n    };\n    // Stores the password in our password state\n    const onChangePassword = (e) => {\n        const password = e.target.value;\n        setPassword(password);\n    };\n\n    const handleLogin = (e) => {\n        e.preventDefault();\n        //Prevent message clear them out\n        setMessage(\"\")\n        setLoading(true)\n\n        // Validates all the fields\n        form.current.validateAll();\n\n        // Validator stores errors and we can check if error exist\n        console.log(checkBtn.current)\n        if (checkBtn.current.context._errors.length === 0) {\n            login(username, password).then(\n                () => {\n                    props.history.push(\"/profile\");\n                    window.location.reload()\n                },\n                (error) => {\n                    // Checking all the data recieved from our backend\n                    // const resMessage =\n                    //     (error.response &&\n                    //         error.response.data &&\n                    //         error.response.data.message) ||\n                    //     error.message ||\n                    //     error.toString();\n\n                    // Setting loading to false and return the error\n                    setLoading(false)\n                    //Checking all the data received from our backend <=== different way\n                    setMessage(resMessage(error))\n                }\n            );\n        } else {\n            setLoading(false)\n        }\n\n    };\n\n    return (\n        <div className=\"col-md-12\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n\n                <Form onSubmit={handleLogin} ref={form}>\n                    <FormGroup text=\"username\">\n                        <Input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"username\"\n                            value={username}\n                            onChange={onChangeUsername}\n                            validations={[required]}\n                        />\n                    </FormGroup>\n\n                    <FormGroup text=\"password\">\n                        <Input\n                            type=\"password\"\n                            className=\"form-control\"\n                            name=\"password\"\n                            value={password}\n                            onChange={onChangePassword}\n                            validations={[required]}\n                        />\n                    </FormGroup>\n\n                    <ButtonSpinner text=\"login\" loading={loading} />\n\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n\n                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n                </Form>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}